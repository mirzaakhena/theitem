package {{LowerCase .GatewayName}}

import (
	"context"
	"{{.PackagePath}}/shared/gogen"
    "{{.PackagePath}}/shared/config"
	"{{.PackagePath}}/domain_{{.DomainName}}/model/entity"
	"{{.PackagePath}}/shared/infrastructure/logger"

	// "github.com/ostafen/clover"
)

type gateway struct {
    log     logger.Logger
    appData gogen.ApplicationData
    config  *config.Config
    // db *clover.DB
}

// NewGateway ...
func NewGateway(log logger.Logger, appData gogen.ApplicationData, cfg *config.Config) (*gateway) {

    // db, err := clover.Open("database")
    // if err != nil {
    // 	panic(err.Error())
    // }
    //
    // exist, err := db.HasCollection("order")
    // if err != nil {
    // 	panic(err.Error())
    // }
    //
    // if !exist {
    // 	err = db.CreateCollection("order")
    // 	if err != nil {
    // 		panic(err.Error())
    // 	}
    // }

	return &gateway{
	    log:     log,
		appData: appData,
		config:  cfg,
		// db:      db,
	}
}

{{range .Methods}} {{if StartWith (LowerCase .MethodName) "save"}}
func (r *gateway) {{.MethodName}}{{.MethodSignature}} {
    r.log.Info(ctx, "called")

    // doc := clover.NewDocument()
    // doc.Set("order", obj)
    //
    // docId, err := r.db.InsertOne("order", doc)
    // if err != nil {
    //     return err
    // }
    //
    // r.log.Info(ctx, "ID %v", docId)

    return {{.DefaultReturnVal}}
}
{{else if StartWith (LowerCase .MethodName) "find"}}
func (r *gateway) {{.MethodName}}{{.MethodSignature}} {
    r.log.Info(ctx, "called")

    //	query := r.db.Query("order")
    //
    //	count, err := query.Count()
    //	if err != nil {
    //		return nil, 0, err
    //	}
    //
    //	objs, err := query.FindAll()
    //	if err != nil {
    //		return nil, 0, err
    //	}
    //
    //	results := make([]*entity.Order, 0)
    //
    //	for _, obj := range objs {
    //
    //		document := struct{ Order entity.Order }{}
    //
    //		err := obj.Unmarshal(&document)
    //		if err != nil {
    //			return nil, 0, err
    //		}
    //
    //		results = append(results, &document.Order)
    //
    //	}

    return {{.DefaultReturnVal}}
}
{{else}}
func (r *gateway) {{.MethodName}}{{.MethodSignature}} {
    r.log.Info(ctx, "called")

    return {{.DefaultReturnVal}}
}
{{end}} {{end}}